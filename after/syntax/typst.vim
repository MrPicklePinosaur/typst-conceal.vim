if !has('conceal')
    finish
endif

" syntax thanks to https://github.com/kaarmu/typst.vim

" Common {{{1
syntax cluster typstCommon
    \ contains=@typstComment

" Common > Comment {{{2
syntax cluster typstComment
    \ contains=typstCommentBlock,typstCommentLine
syntax match typstCommentBlock
    \ #/\*\%(\_.\{-}\)\*/#
    \ contains=typstCommentTodo,@Spell
syntax match typstCommentLine
    \ #//.*#
    \ contains=typstCommentTodo,@Spell
syntax keyword typstCommentTodo
    \ contained
    \ TODO FIXME XXX TBD


" Code {{{1
syntax cluster typstCode
    \ contains=@typstCommon
            \ ,@typstCodeKeywords
            \ ,@typstCodeConstants
            \ ,@typstCodeIdentifiers
            \ ,@typstCodeFunctions
            \ ,@typstCodeParens

" Code > Keywords {{{2
syntax cluster typstCodeKeywords
    \ contains=typstCodeConditional
            \ ,typstCodeRepeat
            \ ,typstCodeKeyword
            \ ,typstCodeStatement
syntax keyword typstCodeConditional
    \ contained
    \ if else
syntax keyword typstCodeRepeat
    \ contained
    \ while for
syntax keyword typstCodeKeyword
    \ contained
    \ not in and or return
syntax region typstCodeStatement
    \ contained
    \ matchgroup=typstCodeStatementWord start=/\v(let|set|show|import|include)>-@!/ end=/\v%(;|$)/
    \ contains=@typstCode

" Code > Identifiers- {{{2
syntax cluster typstCodeIdentifiers
    \ contains=typstCodeIdentifier
            \ ,typstCodeFieldAccess
syntax match typstCodeIdentifier
    \ contained
    \ /\v\K\k*%(-+\k+)*>-@!(<%(let|set|show|import|include))@<![\.\[\(]@!/
syntax match typstCodeFieldAccess
    \ contained
    \ /\v\K\k*%(-+\k+)*>-@!(<%(let|set|show|import|include))@<!\.[\[\(]@!/
    \ nextgroup=typstCodeFieldAccess,typstCodeFunction

" Code > Functions {{{2
syntax cluster typstCodeFunctions
    \ contains=typstCodeFunction
syntax match typstCodeFunction
    \ contained
    \ /\v\K\k*%(-+\k+)*[\(\[]@=/
    \ nextgroup=typstCodeFunctionArgument
syntax match typstCodeFunctionArgument
    \ contained
    \ /\v%(%(\(.{-}\)|\[.{-}\]|\{.{-}\}))*/ transparent
    \ contains=@typstCode

" Code > Constants {{{2
syntax cluster typstCodeConstants
    \ contains=typstCodeConstant
            \ ,typstCodeNumberInteger
            \ ,typstCodeNumberFloat
            \ ,typstCodeNumberLength
            \ ,typstCodeNumberAngle
            \ ,typstCodeNumberRatio
            \ ,typstCodeNumberFraction
            \ ,typstCodeString
syntax match typstCodeConstant
    \ contained
    \ /\v<%(none|auto|true|false)-@!>/ 
syntax match typstCodeNumberInteger
    \ contained
    \ /\v<\d+>/

syntax match typstCodeNumberFloat
    \ contained
    \ /\v<\d+\.\d*>/
syntax match typstCodeNumberLength
    \ contained
    \ /\v<\d+(\.\d*)?(pt|mm|cm|in|em)>/
syntax match typstCodeNumberAngle
    \ contained
    \ /\v<\d+(\.\d*)?(deg|rad)>/
syntax match typstCodeNumberRatio
    \ contained
    \ /\v<\d+(\.\d*)?\%/
syntax match typstCodeNumberFraction
    \ contained
    \ /\v<\d+(\.\d*)?fr>/
syntax region typstCodeString
    \ contained
    \ start=/"/ skip=/\v\\\\|\\"/ end=/"/
    \ contains=@Spell

" Code > Parens {{{2
syntax cluster typstCodeParens
    \ contains=typstCodeParen
            \ ,typstCodeBrace
            \ ,typstCodeBracket
            \ ,typstCodeDollar
            \ ,typstMarkupRawInline
            \ ,typstMarkupRawBlock
syntax region typstCodeParen
    \ contained
    \ matchgroup=Noise start=/\v\(/ end=/\v\)/
    \ contains=@typstCode
syntax region typstCodeBrace
    \ contained
    \ matchgroup=Noise start=/\v\{/ end=/\v\}/
    \ contains=@typstCode
syntax region typstCodeBracket
    \ contained
    \ matchgroup=Noise start=/\v\[/ end=/\v\]/
    \ contains=@typstMarkup
syntax region typstCodeDollar
    \ contained
    \ matchgroup=Number start=/\v\$/ end=/\v\$/
    \ contains=@typstMath


" Hashtag {{{1
syntax cluster typstHashtag
    \ contains=@typstHashtagKeywords
            \ ,@typstHashtagConstants
            \ ,@typstHashtagIdentifiers
            \ ,@typstHashtagFunctions
            \ ,@typstHashtagParens

" Hashtag > Keywords {{{2
syntax cluster typstHashtagKeywords
    \ contains=typstHashtagConditional
            \ ,typstHashtagRepeat
            \ ,typstHashtagKeywords
            \ ,typstHashtagStatement

syntax match typstHashtagControlFlowError
    \ /\v#%(if|while|for)>-@!.{-}$\_.{-}%(\{|\[)/
syntax match typstHashtagControlFlow
    \ /\v#%(if|while|for)>-@!.{-}\ze%(\{|\[)/
    \ contains=typstHashtagConditional,typstHashtagRepeat 
    \ nextgroup=@typstCode
syntax region typstHashtagConditional
    \ contained
    \ start=/\v#if>-@!/ end=/\v\ze(\{|\[)/
    \ contains=@typstCode
syntax region typstHashtagRepeat
    \ contained
    \ start=/\v#(while|for)>-@!/ end=/\v\ze(\{|\[)/
    \ contains=@typstCode
syntax match typstHashtagKeyword
    \ /\v#(return)>-@!/
    \ skipwhite nextgroup=@typstCode
syntax region typstHashtagStatement
    \ matchgroup=typstHashtagStatementWord start=/\v#(let|set|show|import|include)>-@!/ end=/\v%(;|$)/
    \ contains=@typstCode

" Hashtag > Constants {{{2
syntax cluster typstHashtagConstants
    \ contains=typstHashtagConstant
syntax match typstHashtagConstant
    \ /\v#(none|auto|true|false)>-@!/

" Hashtag > Identifiers {{{2
syntax cluster typstHashtagIdentifiers
    \ contains=typstHashtagIdentifier
            \ ,typstHashtagFieldAccess
syntax match typstHashtagIdentifier
    \ /\v#\K\k*%(-+\k+)*>-@!(<%(let|set|show|import|include|if|while|for|return))@<![\.\[\(]@!/
syntax match typstHashtagFieldAccess
    \ /\v#\K\k*%(-+\k+)*>-@!(<%(let|set|show|import|include|if|while|for|return))@<!\.[\[\(]@!/
    \ nextgroup=typstCodeFieldAccess,typstCodeFunction

" Hashtag > Functions {{{2
syntax cluster typstHashtagFunctions
    \ contains=typstHashtagFunction
syntax match typstHashtagFunction
    \ /\v#\K\k*%(-+\k+)*[\(\[]@=/
    \ nextgroup=typstCodeFunctionArgument

" Hashtag > Parens {{{2
syntax cluster typstHashtagParens
    \ contains=typstHashtagParen
            \ ,typstHashtagBrace
            \ ,typstHashtagBracket
            \ ,typstHashtagDollar
syntax region typstHashtagParen
    \ matchgroup=Noise start=/\v\#\(/ end=/\v\)/
    \ contains=@typstCode
syntax region typstHashtagBrace
    \ matchgroup=Noise start=/\v\#\{/ end=/\v\}/
    \ contains=@typstCode
syntax region typstHashtagBracket
    \ matchgroup=Noise start=/\v\#\[/ end=/\v\]/
    \ contains=@typstMarkup
syntax region typstHashtagDollar
    \ matchgroup=Noise start=/\v\#\$/ end=/\v\$/
    \ contains=@typstMath


" Markup {{{1
syntax cluster typstMarkup
    \ contains=@typstCommon
            \ ,@Spell
            \ ,@typstHashtag
            \ ,@typstMarkupText
            \ ,@typstMarkupParens

" Markup > Text {{{2
syntax cluster typstMarkupText
    \ contains=typstMarkupRawInline
            \ ,typstMarkupRawBlock
            \ ,typstMarkupLabel
            \ ,typstMarkupReference
            \ ,typstMarkupUrl
            \ ,typstMarkupHeading
            \ ,typstMarkupBulletList
            \ ,typstMarkupEnumList
            \ ,typstMarkupBold
            \ ,typstMarkupItalic
            \ ,typstMarkupLinebreak
            \ ,typstMarkupNonbreakingSpace
            \ ,typstMarkupShy
            \ ,typstMarkupDash
            \ ,typstMarkupEllipsis
            \ ,typstMarkupTermList

syntax match typstMarkupRawInline
    \ /`.\{-}`/

syntax region typstMarkupRawBlock 
    \ matchgroup=Macro start=/```\w*/ 
    \ matchgroup=Macro end=/```/ keepend
syntax region typstCodeBlock
    \ matchgroup=Macro start=/```typst/
    \ matchgroup=Macro end=/```/ contains=@typstCode keepend
syntax include @C syntax/c.vim
syntax region typstMarkupCCodeBlock
    \ matchgroup=Macro start=/```c\>/
    \ matchgroup=Macro end=/```/ contains=@C keepend
syntax include @CPP syntax/cpp.vim
syntax region typstMarkupCPPCodeBlock 
    \ matchgroup=Macro start=/```cpp/
    \ matchgroup=Macro end=/```/ contains=@CPP keepend
syntax include @Python syntax/python.vim
syntax region typstMarkupPythonCodeBlock 
    \ matchgroup=Macro start=/```python/
    \ matchgroup=Macro end=/```/ contains=@Python keepend

syntax match typstMarkupLabel
    \ /\v\<\K%(\k*-*)*\>/
syntax match typstMarkupReference
    \ /\v\@\K%(\k*-*)*/
syntax match typstMarkupUrl
    \ /http[s]\?:\/\/[[:alnum:]%\/_#.-]*/
syntax match typstMarkupHeading
    \ /^\s*\zs=\{1,6}\s.*$/
    \ contains=typstMarkupLabel,@Spell
syntax match typstMarkupBulletList
    \ /\v^\s*-\s+/
syntax match typstMarkupEnumList
    \ /\v^\s*(\+|\d+\.)\s+/
syntax match typstMarkupItalicError
    \ /\v(\w|\\)@<!_\S@=.*/
syntax match typstMarkupItalic
    \ /\v(\w|\\)@<!_\S@=.*(\n.+)*\S@<=\\@<!_/
    \ contains=typstMarkupItalicRegion
syntax region typstMarkupItalicRegion
    \ contained
    \ matchgroup=typstMarkupItalicDelimiter start=/_/ skip=/\\\@<=_/ end=/_/
    \ concealends contains=typstMarkupLabel,typstMarkupBold,@Spell
syntax region typstMarkupBold
    \ matchgroup=typstMarkupBoldDelimiter start=/\*\S\@=/ skip=/\\\*/ end=/\S\@<=\*\|^$/
    \ concealends contains=typstMarkupLabel,typstMarkupItalic,@Spell
syntax match typstMarkupLinebreak
    \ /\\\\/
syntax match typstMarkupNonbreakingSpace
    \ /\~/
syntax match typstMarkupShy
    \ /-?/
syntax match typstMarkupDash
    \ /-\{2,3}/
syntax match typstMarkupEllipsis
    \ /\.\.\./
syntax match typstMarkupTermList
    \ #\v^\s*\/\s+[^:]*:#

" Markup > Parens {{{2
syntax cluster typstMarkupParens
    \ contains=typstMarkupDollar
syntax region typstMarkupDollar
    \ matchgroup=Special start=/\$/ skip=/\\\$/ end=/\$/
    \ contains=@typstMath


" Math {{{1
syntax cluster typstMath
    \ contains=@typstCommon
            \ ,@typstHashtag
            \ ,typstMathFunction
            \ ,typstMathNumber
            \ ,typstMathSymbol

syntax match typstMathFunction
    \ /\<\v\zs\a\w+\ze\(/
    \ contained
syntax match typstMathNumber
    \ /\<\d\+\>/
    \ contained


" mathmode shorthands
syntax match typMathShorthand '\[|' conceal cchar=‚ü¶
syntax match typMathShorthand '\.\.\.' conceal cchar=‚Ä¶
syntax match typMathShorthand '!=' conceal cchar=‚â†

fun! s:ConcealFn(pat, cchar)
    exe "syntax match typstMathSymbol '".a:pat."' contained conceal cchar=".a:cchar
endfun

call s:ConcealFn('paren\.l', '(')
call s:ConcealFn('paren\.r', ')')
call s:ConcealFn('paren\.t', '‚èú')
call s:ConcealFn('paren\.b', '‚èù')
call s:ConcealFn('brace\.l', '{')
call s:ConcealFn('brace\.r', '}')
call s:ConcealFn('brace\.t', '‚èû')
call s:ConcealFn('brace\.b', '‚èü')
call s:ConcealFn('bracket\.l', '{')
call s:ConcealFn('bracket\.l\.double', '‚ü¶')
call s:ConcealFn('bracket\.r', '}')
call s:ConcealFn('bracket\.r\.double', '‚üß')
call s:ConcealFn('bracket\.t', '‚é¥')
call s:ConcealFn('bracket\.b', '‚éµ')
call s:ConcealFn('turtle\.l', '„Äî')
call s:ConcealFn('turtle\.r', '„Äï')
call s:ConcealFn('turtle\.t', '‚è†')
call s:ConcealFn('turtle\.b', '‚è°')
call s:ConcealFn('bar\.v', '|')
call s:ConcealFn('bar\.v\.double', '‚Äñ')
call s:ConcealFn('bar\.v\.triple', '‚¶Ä')
call s:ConcealFn('bar\.v\.broken', '¬¶')
call s:ConcealFn('bar\.v\.circle', '‚¶∂')
call s:ConcealFn('bar\.h', '‚Äï')
call s:ConcealFn('fence\.l', '‚ßò')
call s:ConcealFn('fence\.l\.double', '‚ßö')
call s:ConcealFn('fence\.r', '‚ßô')
call s:ConcealFn('fence\.r\.double', '‚ßõ')
call s:ConcealFn('fence\.dotted', '‚¶ô')
call s:ConcealFn('angle', '‚à†')
call s:ConcealFn('angle\.l', '‚ü®')
call s:ConcealFn('angle\.r', '‚ü©')
call s:ConcealFn('angle\.l\.double', '„Ää')
call s:ConcealFn('angle\.r\.double', '„Äã')
call s:ConcealFn('angle\.acute', '‚¶ü')
call s:ConcealFn('angle\.arc', '‚à°')
call s:ConcealFn('angle\.arc\.rev', '‚¶õ')
call s:ConcealFn('angle\.rev', '‚¶£')
call s:ConcealFn('angle\.right', '‚àü')
call s:ConcealFn('angle\.right\.rev', '‚Øæ')
call s:ConcealFn('angle\.right\.arc', '‚äæ')
call s:ConcealFn('angle\.right\.dot', '‚¶ù')
call s:ConcealFn('angle\.right\.sq', '‚¶ú')
call s:ConcealFn('angle\.spatial', '‚üÄ')
call s:ConcealFn('angle\.spheric', '‚à¢')
call s:ConcealFn('angle\.spheric\.rev', '‚¶†')
call s:ConcealFn('angle\.spheric\.top', '‚¶°')
call s:ConcealFn('amp', '&')
call s:ConcealFn('amp\.inv', '‚Öã')
call s:ConcealFn('ast\.op', '‚àó')
call s:ConcealFn('ast\.basic', '*')
call s:ConcealFn('ast\.low', '‚Åé')
call s:ConcealFn('ast\.double', '‚Åë')
call s:ConcealFn('ast\.triple', '‚ÅÇ')
call s:ConcealFn('ast\.small', 'Ôπ°')
call s:ConcealFn('ast\.circle', '‚äõ')
call s:ConcealFn('ast\.square', '‚ßÜ')
call s:ConcealFn('at', '@')
call s:ConcealFn('backslash', '\')
call s:ConcealFn('backslash\.circle', '‚¶∏')
call s:ConcealFn('backslash\.not', '‚ß∑')
call s:ConcealFn('co', '‚ÑÖ')
call s:ConcealFn('colon', ':')
call s:ConcealFn('colon\.eq', '‚âî')
call s:ConcealFn('colon\.double\.eq', '‚©¥')
call s:ConcealFn('comma', ',')
call s:ConcealFn('dagger', '‚Ä†')
call s:ConcealFn('dagger\.double', '‚Ä°')
call s:ConcealFn('dash\.en', '‚Äì')
call s:ConcealFn('dash\.em', '‚Äî')
call s:ConcealFn('dash\.fig', '‚Äí')
call s:ConcealFn('dash\.wave', '„Äú')
call s:ConcealFn('dash\.colon', '‚àπ')
call s:ConcealFn('dash\.circle', '‚äù')
call s:ConcealFn('dash\.wave\.double', '„Ä∞')
call s:ConcealFn('dot\.op', '‚ãÖ')
call s:ConcealFn('dot\.basic', '.')
call s:ConcealFn('dot\.c', '¬∑')
call s:ConcealFn('dot\.circle', '‚äô')
call s:ConcealFn('dot\.circle\.big', '‚®Ä')
call s:ConcealFn('dot\.square', '‚ä°')
call s:ConcealFn('dot\.double', '¬®')
" syntax match typstMathSymbol 'dot\.triple' ‚Éõcontained conceal cchar= ‚Éõ
" syntax match typstMathSymbol 'dot\.quad' contained conceal cchar= ‚Éõ
call s:ConcealFn('excl', '!')
call s:ConcealFn('excl\.double', '‚Äº')
call s:ConcealFn('excl\.inv', '¬°')
call s:ConcealFn('excl\.quest', '‚Åâ')
call s:ConcealFn('quest', '?')
call s:ConcealFn('quest\.double', '‚Åá')
call s:ConcealFn('quest\.excl', '‚Åà')
call s:ConcealFn('quest\.inv', '¬ø')
call s:ConcealFn('interrobang', '‚ÄΩ')
call s:ConcealFn('hash', '#')
call s:ConcealFn('hyph', '‚Äê')
call s:ConcealFn('hyph\.minus', '-')
call s:ConcealFn('hyph\.nobreak', '‚Äë')
call s:ConcealFn('hyph\.point', '‚Äß')
call s:ConcealFn('hyph\.soft', '¬≠')
call s:ConcealFn('percent', '%')
call s:ConcealFn('copyright', '¬©')
call s:ConcealFn('copyright\.sound', '‚Ñó')
call s:ConcealFn('permille', '‚Ä∞')
call s:ConcealFn('pilcrow', '¬∂')
call s:ConcealFn('pilcrow\.rev', '‚Åã')
call s:ConcealFn('section', '¬ß')
call s:ConcealFn('semi', ';')
call s:ConcealFn('semi\.rev', '‚Åè')
call s:ConcealFn('slash', '/')
call s:ConcealFn('slash\.double', '‚´Ω')
call s:ConcealFn('slash\.triple', '‚´ª')
call s:ConcealFn('slash\.big', '‚ß∏')
call s:ConcealFn('dots\.h\.c', '‚ãØ')
call s:ConcealFn('dots\.h', '‚Ä¶')
call s:ConcealFn('dots\.v', '‚ãÆ')
call s:ConcealFn('dots\.down', '‚ã±')
call s:ConcealFn('dots\.up', '‚ã∞')
call s:ConcealFn('tilde\.op', '‚àº')
call s:ConcealFn('tilde\.basic', '~')
call s:ConcealFn('tilde\.eq', '‚âÉ')
call s:ConcealFn('tilde\.eq\.not', '‚âÑ')
call s:ConcealFn('tilde\.eq\.rev', '‚ãç')
call s:ConcealFn('tilde\.equiv', '‚âÖ')
call s:ConcealFn('tilde\.equiv\.not', '‚âá')
call s:ConcealFn('tilde\.nequiv', '‚âÜ')
call s:ConcealFn('tilde\.not', '‚âÅ')
call s:ConcealFn('tilde\.rev', '‚àΩ')
call s:ConcealFn('tilde\.rev\.equiv', '‚âå')
call s:ConcealFn('tilde\.triple', '‚âã')
call s:ConcealFn('acute', '¬¥')
call s:ConcealFn('acute\.double', 'Àù')
call s:ConcealFn('breve', 'Àò')
call s:ConcealFn('caret', '‚Ä∏')
call s:ConcealFn('caron', 'Àá')
call s:ConcealFn('hat', '^')
call s:ConcealFn('diaer', '¬®')
call s:ConcealFn('grave', '`')
call s:ConcealFn('macron', '¬Ø')
call s:ConcealFn('quote\.double', '"')
call s:ConcealFn('quote\.single', "'")
call s:ConcealFn('quote\.l\.double', '‚Äú')
call s:ConcealFn('quote\.l\.single', '‚Äò')
call s:ConcealFn('quote\.r\.double', '‚Äù')
call s:ConcealFn('quote\.r\.single', '‚Äô')
call s:ConcealFn('quote\.angle\.l\.double', '¬´')
call s:ConcealFn('quote\.angle\.l\.single', '‚Äπ')
call s:ConcealFn('quote\.angle\.r\.double', '¬ª')
call s:ConcealFn('quote\.angle\.r\.single', '‚Ä∫')
call s:ConcealFn('quote\.high\.double', '‚Äü')
call s:ConcealFn('quote\.high\.single', '‚Äõ')
call s:ConcealFn('quote\.low\.double', '‚Äû')
call s:ConcealFn('quote\.low\.single', '‚Äö')
call s:ConcealFn('prime', '‚Ä≤')
call s:ConcealFn('prime\.rev', '‚Äµ')
call s:ConcealFn('prime\.double', '‚Ä≥')
call s:ConcealFn('prime\.double\.rev', '‚Ä∂')
call s:ConcealFn('prime\.triple', '‚Ä¥')
call s:ConcealFn('prime\.triple\.rev', '‚Ä∑')
call s:ConcealFn('prime\.quad', '‚Åó')
call s:ConcealFn('plus', '+')
call s:ConcealFn('plus\.circle', '‚äï')
call s:ConcealFn('plus\.circle\.arrow', '‚ü¥')
call s:ConcealFn('plus\.circle\.big', '‚®Å')
call s:ConcealFn('plus\.dot', '‚àî')
call s:ConcealFn('plus\.minus', '¬±')
call s:ConcealFn('plus\.small', 'Ôπ¢')
call s:ConcealFn('plus\.square', '‚äû')
call s:ConcealFn('plus\.triangle', '‚®π')
call s:ConcealFn('minus', '‚àí')
call s:ConcealFn('minus\.circle', '‚äñ')
call s:ConcealFn('minus\.dot', '‚à∏')
call s:ConcealFn('minus\.plus', '‚àì')
call s:ConcealFn('minus\.square', '‚äü')
call s:ConcealFn('minus\.tilde', '‚âÇ')
call s:ConcealFn('minus\.triangle', '‚®∫')
call s:ConcealFn('div', '√∑')
call s:ConcealFn('div\.circle', '‚®∏')
call s:ConcealFn('times', '√ó')
call s:ConcealFn('times\.big', '‚®â')
call s:ConcealFn('times\.circle', '‚äó')
call s:ConcealFn('times\.circle\.big', '‚®Ç')
call s:ConcealFn('times\.div', '‚ãá')
call s:ConcealFn('times\.three\.l', '‚ãã')
call s:ConcealFn('times\.three\.r', '‚ãå')
call s:ConcealFn('times\.l', '‚ãâ')
call s:ConcealFn('times\.r', '‚ãä')
call s:ConcealFn('times\.square', '‚ä†')
call s:ConcealFn('times\.triangle', '‚®ª')
call s:ConcealFn('ratio', '‚à∂')
call s:ConcealFn('eq', '=')
call s:ConcealFn('eq\.star', '‚âõ')
call s:ConcealFn('eq\.circle', '‚äú')
call s:ConcealFn('eq\.colon', '‚âï')
call s:ConcealFn('eq\.def', '‚âù')
call s:ConcealFn('eq\.delta', '‚âú')
call s:ConcealFn('eq\.equi', '‚âö')
call s:ConcealFn('eq\.est', '‚âô')
call s:ConcealFn('eq\.gt', '‚ãù')
call s:ConcealFn('eq\.lt', '‚ãú')
call s:ConcealFn('eq\.m', '‚âû')
call s:ConcealFn('eq\.not', '‚â†')
call s:ConcealFn('eq\.prec', '‚ãû')
call s:ConcealFn('eq\.quest', '‚âü')
call s:ConcealFn('eq\.small', 'Ôπ¶')
call s:ConcealFn('eq\.succ', '‚ãü')
call s:ConcealFn('eq\.triple', '‚â°')
call s:ConcealFn('eq\.quad', '‚â£')
call s:ConcealFn('gt', '>')
call s:ConcealFn('gt\.circle', '‚ßÅ')
call s:ConcealFn('gt\.curly', '‚âª')
call s:ConcealFn('gt\.curly\.approx', '‚™∏')
call s:ConcealFn('gt\.curly\.double', '‚™º')
call s:ConcealFn('gt\.curly\.eq', '‚âΩ')
call s:ConcealFn('gt\.curly\.eq\.not', '‚ã°')
call s:ConcealFn('gt\.curly\.equiv', '‚™¥')
call s:ConcealFn('gt\.curly\.napprox', '‚™∫')
call s:ConcealFn('gt\.curly\.nequiv', '‚™∂')
call s:ConcealFn('gt\.curly\.not', '‚äÅ')
call s:ConcealFn('gt\.curly\.ntilde', '‚ã©')
call s:ConcealFn('gt\.curly\.tilde', '‚âø')
call s:ConcealFn('gt\.dot', '‚ãó')
call s:ConcealFn('gt\.double', '‚â´')
call s:ConcealFn('gt\.eq', '‚â•')
call s:ConcealFn('gt\.eq\.slant', '‚©æ')
call s:ConcealFn('gt\.eq\.lt', '‚ãõ')
call s:ConcealFn('gt\.eq\.not', '‚â±')
call s:ConcealFn('gt\.equiv', '‚âß')
call s:ConcealFn('gt\.lt', '‚â∑')
call s:ConcealFn('gt\.lt\.not', '‚âπ')
call s:ConcealFn('gt\.nequiv', '‚â©')
call s:ConcealFn('gt\.not', '‚âØ')
call s:ConcealFn('gt\.ntilde', '‚ãß')
call s:ConcealFn('gt\.small', 'Ôπ•')
call s:ConcealFn('gt\.tilde', '‚â≥')
call s:ConcealFn('gt\.tilde\.not', '‚âµ')
call s:ConcealFn('gt\.tri', '‚ä≥')
call s:ConcealFn('gt\.tri\.eq', '‚äµ')
call s:ConcealFn('gt\.tri\.eq\.not', '‚ã≠')
call s:ConcealFn('gt\.tri\.not', '‚ã´')
call s:ConcealFn('gt\.triple', '‚ãô')
call s:ConcealFn('gt\.triple\.nested', '‚´∏')
call s:ConcealFn('lt', '<')
call s:ConcealFn('lt\.circle', '‚ßÄ')
call s:ConcealFn('lt\.curly', '‚â∫')
call s:ConcealFn('lt\.curly\.approx', '‚™∑')
call s:ConcealFn('lt\.curly\.double', '‚™ª')
call s:ConcealFn('lt\.curly\.eq', '‚âº')
call s:ConcealFn('lt\.curly\.eq\.not', '‚ã†')
call s:ConcealFn('lt\.curly\.equiv', '‚™≥')
call s:ConcealFn('lt\.curly\.napprox', '‚™π')
call s:ConcealFn('lt\.curly\.nequiv', '‚™µ')
call s:ConcealFn('lt\.curly\.not', '‚äÄ')
call s:ConcealFn('lt\.curly\.ntilde', '‚ã®')
call s:ConcealFn('lt\.curly\.tilde', '‚âæ')
call s:ConcealFn('lt\.dot', '‚ãñ')
call s:ConcealFn('lt\.double', '‚â™')
call s:ConcealFn('lt\.eq', '‚â§')
call s:ConcealFn('lt\.eq\.slant', '‚©Ω')
call s:ConcealFn('lt\.eq\.gt', '‚ãö')
call s:ConcealFn('lt\.eq\.not', '‚â∞')
call s:ConcealFn('lt\.equiv', '‚â¶')
call s:ConcealFn('lt\.gt', '‚â∂')
call s:ConcealFn('lt\.gt\.not', '‚â∏')
call s:ConcealFn('lt\.nequiv', '‚â®')
call s:ConcealFn('lt\.not', '‚âÆ')
call s:ConcealFn('lt\.ntilde', '‚ã¶')
call s:ConcealFn('lt\.small', 'Ôπ§')
call s:ConcealFn('lt\.tilde', '‚â≤')
call s:ConcealFn('lt\.tilde\.not', '‚â¥')
call s:ConcealFn('lt\.tri', '‚ä≤')
call s:ConcealFn('lt\.tri\.eq', '‚ä¥')
call s:ConcealFn('lt\.tri\.eq\.not', '‚ã¨')
call s:ConcealFn('lt\.tri\.not', '‚ã™')
call s:ConcealFn('lt\.triple', '‚ãò')
call s:ConcealFn('lt\.triple\.nested', '‚´∑')
call s:ConcealFn('approx', '‚âà')
call s:ConcealFn('approx\.eq', '‚âä')
call s:ConcealFn('approx\.not', '‚ââ')
call s:ConcealFn('prec', '‚â∫')
call s:ConcealFn('prec\.approx', '‚™∑')
call s:ConcealFn('prec\.double', '‚™ª')
call s:ConcealFn('prec\.eq', '‚âº')
call s:ConcealFn('prec\.eq\.not', '‚ã†')
call s:ConcealFn('prec\.equiv', '‚™≥')
call s:ConcealFn('prec\.napprox', '‚™π')
call s:ConcealFn('prec\.nequiv', '‚™µ')
call s:ConcealFn('prec\.not', '‚äÄ')
call s:ConcealFn('prec\.ntilde', '‚ã®')
call s:ConcealFn('prec\.tilde', '‚âæ')
call s:ConcealFn('succ', '‚âª')
call s:ConcealFn('succ\.approx', '‚™∏')
call s:ConcealFn('succ\.double', '‚™º')
call s:ConcealFn('succ\.eq', '‚âΩ')
call s:ConcealFn('succ\.eq\.not', '‚ã°')
call s:ConcealFn('succ\.equiv', '‚™¥')
call s:ConcealFn('succ\.napprox', '‚™∫')
call s:ConcealFn('succ\.nequiv', '‚™∂')
call s:ConcealFn('succ\.not', '‚äÅ')
call s:ConcealFn('succ\.ntilde', '‚ã©')
call s:ConcealFn('succ\.tilde', '‚âø')
call s:ConcealFn('equiv', '‚â°')
call s:ConcealFn('equiv\.not', '‚â¢')
call s:ConcealFn('prop', '‚àù')
call s:ConcealFn('emptyset', '‚àÖ')
call s:ConcealFn('emptyset\.rev', '‚¶∞')
call s:ConcealFn('nothing', '‚àÖ')
call s:ConcealFn('nothing\.rev', '‚¶∞')
call s:ConcealFn('without', '‚àñ')
call s:ConcealFn('complement', '‚àÅ')
call s:ConcealFn('in', '‚àà')
call s:ConcealFn('in\.not', '‚àâ')
call s:ConcealFn('in\.rev', '‚àã')
call s:ConcealFn('in\.rev\.not', '‚àå')
call s:ConcealFn('in\.rev\.small', '‚àç')
call s:ConcealFn('in\.small', '‚àä')
call s:ConcealFn('subset', '‚äÇ')
call s:ConcealFn('subset\.dot', '‚™Ω')
call s:ConcealFn('subset\.double', '‚ãê')
call s:ConcealFn('subset\.eq', '‚äÜ')
call s:ConcealFn('subset\.eq\.not', '‚äà')
call s:ConcealFn('subset\.eq\.sq', '‚äë')
call s:ConcealFn('subset\.eq\.sq\.not', '‚ã¢')
call s:ConcealFn('subset\.neq', '‚ää')
call s:ConcealFn('subset\.not', '‚äÑ')
call s:ConcealFn('subset\.sq', '‚äè')
call s:ConcealFn('subset\.sq\.neq', '‚ã§')
call s:ConcealFn('supset', '‚äÉ')
call s:ConcealFn('supset\.dot', '‚™æ')
call s:ConcealFn('supset\.double', '‚ãë')
call s:ConcealFn('supset\.eq', '‚äá')
call s:ConcealFn('supset\.eq\.not', '‚äâ')
call s:ConcealFn('supset\.eq\.sq', '‚äí')
call s:ConcealFn('supset\.eq\.sq\.not', '‚ã£')
call s:ConcealFn('supset\.neq', '‚äã')
call s:ConcealFn('supset\.not', '‚äÖ')
call s:ConcealFn('supset\.sq', '‚äê')
call s:ConcealFn('supset\.sq\.neq', '‚ã•')
call s:ConcealFn('union', '‚à™')
call s:ConcealFn('union\.arrow', '‚äå')
call s:ConcealFn('union\.big', '‚ãÉ')
call s:ConcealFn('union\.dot', '‚äç')
call s:ConcealFn('union\.dot\.big', '‚®É')
call s:ConcealFn('union\.double', '‚ãì')
call s:ConcealFn('union\.minus', '‚©Å')
call s:ConcealFn('union\.or', '‚©Ö')
call s:ConcealFn('union\.plus', '‚äé')
call s:ConcealFn('union\.plus\.big', '‚®Ñ')
call s:ConcealFn('union\.sq', '‚äî')
call s:ConcealFn('union\.sq\.big', '‚®Ü')
call s:ConcealFn('union\.sq\.double', '‚©è')
call s:ConcealFn('sect', '‚à©')
call s:ConcealFn('sect\.and', '‚©Ñ')
call s:ConcealFn('sect\.big', '‚ãÇ')
call s:ConcealFn('sect\.dot', '‚©Ä')
call s:ConcealFn('sect\.double', '‚ãí')
call s:ConcealFn('sect\.sq', '‚äì')
call s:ConcealFn('sect\.sq\.big', '‚®Ö')
call s:ConcealFn('sect\.sq\.double', '‚©é')
call s:ConcealFn('infinity', '‚àû')
call s:ConcealFn('oo', '‚àû')
call s:ConcealFn('diff', '‚àÇ')
call s:ConcealFn('nabla', '‚àá')
call s:ConcealFn('sum', '‚àë')
call s:ConcealFn('sum\.integral', '‚®ã')
call s:ConcealFn('product', '‚àè')
call s:ConcealFn('product\.co', '‚àê')
call s:ConcealFn('integral', '‚à´')
call s:ConcealFn('integral\.arrow\.hook', '‚®ó')
call s:ConcealFn('integral\.ccw', '‚®ë')
call s:ConcealFn('integral\.cont', '‚àÆ')
call s:ConcealFn('integral\.cont\.ccw', '‚à≥')
call s:ConcealFn('integral\.cont\.cw', '‚à≤')
call s:ConcealFn('integral\.cw', '‚à±')
call s:ConcealFn('integral\.double', '‚à¨')
call s:ConcealFn('integral\.quad', '‚®å')
call s:ConcealFn('integral\.sect', '‚®ô')
call s:ConcealFn('integral\.square', '‚®ñ')
call s:ConcealFn('integral\.surf', '‚àØ')
call s:ConcealFn('integral\.times', '‚®ò')
call s:ConcealFn('integral\.triple', '‚à≠')
call s:ConcealFn('integral\.union', '‚®ö')
call s:ConcealFn('integral\.vol', '‚à∞')
call s:ConcealFn('laplace', '‚àÜ')
call s:ConcealFn('forall', '‚àÄ')
call s:ConcealFn('exists', '‚àÉ')
call s:ConcealFn('exists\.not', '‚àÑ')
call s:ConcealFn('top', '‚ä§')
call s:ConcealFn('bot', '‚ä•')
call s:ConcealFn('not', '¬¨')
call s:ConcealFn('and', '‚àß')
call s:ConcealFn('and\.big', '‚ãÄ')
call s:ConcealFn('and\.curly', '‚ãè')
call s:ConcealFn('and\.dot', '‚üë')
call s:ConcealFn('and\.double', '‚©ì')
call s:ConcealFn('or', '‚à®')
call s:ConcealFn('or\.big', '‚ãÅ')
call s:ConcealFn('or\.curly', '‚ãé')
call s:ConcealFn('or\.dot', '‚üá')
call s:ConcealFn('or\.double', '‚©î')
call s:ConcealFn('xor', '‚äï')
call s:ConcealFn('xor\.big', '‚®Å')
call s:ConcealFn('models', '‚äß')
call s:ConcealFn('therefore', '‚à¥')
call s:ConcealFn('because', '‚àµ')
call s:ConcealFn('qed', '‚àé')
call s:ConcealFn('compose', '‚àò')
call s:ConcealFn('convolve', '‚àó')
call s:ConcealFn('multimap', '‚ä∏')
call s:ConcealFn('divides', '‚à£')
call s:ConcealFn('divides\.not', '‚à§')
call s:ConcealFn('wreath', '‚âÄ')
call s:ConcealFn('parallel', '‚à•')
call s:ConcealFn('parallel\.circle', '‚¶∑')
call s:ConcealFn('parallel\.not', '‚à¶')
call s:ConcealFn('perp', '‚üÇ')
call s:ConcealFn('perp\.circle', '‚¶π')
call s:ConcealFn('diameter', '‚åÄ')
call s:ConcealFn('join', '‚®ù')
call s:ConcealFn('join\.r', '‚üñ')
call s:ConcealFn('join\.l', '‚üï')
call s:ConcealFn('join\.l\.r', '‚üó')
call s:ConcealFn('degree', '¬∞')
call s:ConcealFn('degree\.c', '‚ÑÉ')
call s:ConcealFn('degree\.f', '‚Ñâ')
call s:ConcealFn('smash', '‚®≥')
call s:ConcealFn('bitcoin', '‚Çø')
call s:ConcealFn('dollar', '$')
call s:ConcealFn('euro', '‚Ç¨')
call s:ConcealFn('franc', '‚Ç£')
call s:ConcealFn('lira', '‚Ç∫')
call s:ConcealFn('peso', '‚Ç±')
call s:ConcealFn('pound', '¬£')
call s:ConcealFn('ruble', '‚ÇΩ')
call s:ConcealFn('rupee', '‚Çπ')
call s:ConcealFn('won', '‚Ç©')
call s:ConcealFn('yen', '¬•')
call s:ConcealFn('ballot', '‚òê')
call s:ConcealFn('ballot\.x', '‚òí')
call s:ConcealFn('checkmark', '‚úì')
call s:ConcealFn('checkmark\.light', 'üó∏')
call s:ConcealFn('floral', '‚ù¶')
call s:ConcealFn('floral\.l', '‚òô')
call s:ConcealFn('floral\.r', '‚ùß')
call s:ConcealFn('notes\.up', 'üéú')
call s:ConcealFn('notes\.down', 'üéù')
call s:ConcealFn('refmark', '‚Äª')
call s:ConcealFn('servicemark', '‚Ñ†')
call s:ConcealFn('maltese', '‚ú†')
call s:ConcealFn('suit\.club', '‚ô£')
call s:ConcealFn('suit\.diamond', '‚ô¶')
call s:ConcealFn('suit\.heart', '‚ô•')
call s:ConcealFn('suit\.spade', '‚ô†')
call s:ConcealFn('bullet', '‚Ä¢')
call s:ConcealFn('circle\.stroked', '‚óã')
call s:ConcealFn('circle\.stroked\.tiny', '‚àò')
call s:ConcealFn('circle\.stroked\.small', '‚ö¨')
call s:ConcealFn('circle\.stroked\.big', '‚óØ')
call s:ConcealFn('circle\.filled', '‚óè')
call s:ConcealFn('circle\.filled\.tiny', '‚¶Å')
call s:ConcealFn('circle\.filled\.small', '‚àô')
call s:ConcealFn('circle\.filled\.big', '‚¨§')
call s:ConcealFn('circle\.dotted', '‚óå')
call s:ConcealFn('circle\.nested', '‚äö')
call s:ConcealFn('ellipse\.stroked\.h', '‚¨≠')
call s:ConcealFn('ellipse\.stroked\.v', '‚¨Ø')
call s:ConcealFn('ellipse\.filled\.h', '‚¨¨')
call s:ConcealFn('ellipse\.filled\.v', '‚¨Æ')
call s:ConcealFn('triangle\.stroked\.r', '‚ñ∑')
call s:ConcealFn('triangle\.stroked\.l', '‚óÅ')
call s:ConcealFn('triangle\.stroked\.t', '‚ñ≥')
call s:ConcealFn('triangle\.stroked\.b', '‚ñΩ')
call s:ConcealFn('triangle\.stroked\.bl', '‚ó∫')
call s:ConcealFn('triangle\.stroked\.br', '‚óø')
call s:ConcealFn('triangle\.stroked\.tl', '‚ó∏')
call s:ConcealFn('triangle\.stroked\.tr', '‚óπ')
call s:ConcealFn('triangle\.stroked\.small\.r', '‚ñπ')
call s:ConcealFn('triangle\.stroked\.small\.b', '‚ñø')
call s:ConcealFn('triangle\.stroked\.small\.l', '‚óÉ')
call s:ConcealFn('triangle\.stroked\.small\.t', '‚ñµ')
call s:ConcealFn('triangle\.stroked\.rounded', 'üõÜ')
call s:ConcealFn('triangle\.stroked\.nested', '‚üÅ')
call s:ConcealFn('triangle\.stroked\.dot', '‚ó¨')
call s:ConcealFn('triangle\.filled\.r', '‚ñ∂')
call s:ConcealFn('triangle\.filled\.l', '‚óÄ')
call s:ConcealFn('triangle\.filled\.t', '‚ñ≤')
call s:ConcealFn('triangle\.filled\.b', '‚ñº')
call s:ConcealFn('triangle\.filled\.bl', '‚ó£')
call s:ConcealFn('triangle\.filled\.br', '‚ó¢')
call s:ConcealFn('triangle\.filled\.tl', '‚ó§')
call s:ConcealFn('triangle\.filled\.tr', '‚ó•')
call s:ConcealFn('triangle\.filled\.small\.r', '‚ñ∏')
call s:ConcealFn('triangle\.filled\.small\.b', '‚ñæ')
call s:ConcealFn('triangle\.filled\.small\.l', '‚óÇ')
call s:ConcealFn('triangle\.filled\.small\.t', '‚ñ¥')
call s:ConcealFn('square\.stroked', '‚ñ°')
call s:ConcealFn('square\.stroked\.tiny', '‚ñ´')
call s:ConcealFn('square\.stroked\.small', '‚óΩ')
call s:ConcealFn('square\.stroked\.medium', '‚óª')
call s:ConcealFn('square\.stroked\.big', '‚¨ú')
call s:ConcealFn('square\.stroked\.dotted', '‚¨ö')
call s:ConcealFn('square\.stroked\.rounded', '‚ñ¢')
call s:ConcealFn('square\.filled', '‚ñ†')
call s:ConcealFn('square\.filled\.tiny', '‚ñ™')
call s:ConcealFn('square\.filled\.small', '‚óæ')
call s:ConcealFn('square\.filled\.medium', '‚óº')
call s:ConcealFn('square\.filled\.big', '‚¨õ')
call s:ConcealFn('rect\.stroked\.h', '‚ñ≠')
call s:ConcealFn('rect\.stroked\.v', '‚ñØ')
call s:ConcealFn('rect\.filled\.h', '‚ñ¨')
call s:ConcealFn('rect\.filled\.v', '‚ñÆ')
call s:ConcealFn('penta\.stroked', '‚¨†')
call s:ConcealFn('penta\.filled', '‚¨ü')
call s:ConcealFn('hexa\.stroked', '‚¨°')
call s:ConcealFn('hexa\.filled', '‚¨¢')
call s:ConcealFn('diamond\.stroked', '‚óá')
call s:ConcealFn('diamond\.stroked\.small', '‚ãÑ')
call s:ConcealFn('diamond\.stroked\.medium', '‚¨¶')
call s:ConcealFn('diamond\.stroked\.dot', '‚üê')
call s:ConcealFn('diamond\.filled', '‚óÜ')
call s:ConcealFn('diamond\.filled\.medium', '‚¨•')
call s:ConcealFn('diamond\.filled\.small', '‚¨©')
call s:ConcealFn('lozenge\.stroked', '‚óä')
call s:ConcealFn('lozenge\.stroked\.small', '‚¨´')
call s:ConcealFn('lozenge\.stroked\.medium', '‚¨®')
call s:ConcealFn('lozenge\.filled', '‚ß´')
call s:ConcealFn('lozenge\.filled\.small', '‚¨™')
call s:ConcealFn('lozenge\.filled\.medium', '‚¨ß')
call s:ConcealFn('star\.op', '‚ãÜ')
call s:ConcealFn('star\.stroked', '‚òÖ')
call s:ConcealFn('star\.filled', '‚òÖ')
call s:ConcealFn('arrow\.r', '‚Üí')
call s:ConcealFn('arrow\.r\.long\.bar', '‚üº')
call s:ConcealFn('arrow\.r\.bar', '‚Ü¶')
call s:ConcealFn('arrow\.r\.curve', '‚§∑')
call s:ConcealFn('arrow\.r\.dashed', '‚á¢')
call s:ConcealFn('arrow\.r\.dotted', '‚§ë')
call s:ConcealFn('arrow\.r\.double', '‚áí')
call s:ConcealFn('arrow\.r\.double\.bar', '‚§á')
call s:ConcealFn('arrow\.r\.double\.long', '‚üπ')
call s:ConcealFn('arrow\.r\.double\.long\.bar', '‚üæ')
call s:ConcealFn('arrow\.r\.double\.not', '‚áè')
call s:ConcealFn('arrow\.r\.filled', '‚û°')
call s:ConcealFn('arrow\.r\.hook', '‚Ü™')
call s:ConcealFn('arrow\.r\.long', '‚ü∂')
call s:ConcealFn('arrow\.r\.long\.squiggly', '‚üø')
call s:ConcealFn('arrow\.r\.loop', '‚Ü¨')
call s:ConcealFn('arrow\.r\.not', '‚Üõ')
call s:ConcealFn('arrow\.r\.quad', '‚≠Ü')
call s:ConcealFn('arrow\.r\.squiggly', '‚áù')
call s:ConcealFn('arrow\.r\.stop', '‚á•')
call s:ConcealFn('arrow\.r\.stroked', '‚á®')
call s:ConcealFn('arrow\.r\.tail', '‚Ü£')
call s:ConcealFn('arrow\.r\.triple', '‚áõ')
call s:ConcealFn('arrow\.r\.twohead\.bar', '‚§Ö')
call s:ConcealFn('arrow\.r\.twohead', '‚Ü†')
call s:ConcealFn('arrow\.r\.wave', '‚Üù')
call s:ConcealFn('arrow\.l', '‚Üê')
call s:ConcealFn('arrow\.l\.bar', '‚Ü§')
call s:ConcealFn('arrow\.l\.curve', '‚§∂')
call s:ConcealFn('arrow\.l\.dashed', '‚á†')
call s:ConcealFn('arrow\.l\.dotted', '‚¨∏')
call s:ConcealFn('arrow\.l\.double', '‚áê')
call s:ConcealFn('arrow\.l\.double\.bar', '‚§Ü')
call s:ConcealFn('arrow\.l\.double\.long', '‚ü∏')
call s:ConcealFn('arrow\.l\.double\.long\.bar', '‚üΩ')
call s:ConcealFn('arrow\.l\.double\.not', '‚áç')
call s:ConcealFn('arrow\.l\.filled', '‚¨Ö')
call s:ConcealFn('arrow\.l\.hook', '‚Ü©')
call s:ConcealFn('arrow\.l\.long', '‚üµ')
call s:ConcealFn('arrow\.l\.long\.bar', '‚üª')
call s:ConcealFn('arrow\.l\.long\.squiggly', '‚¨≥')
call s:ConcealFn('arrow\.l\.loop', '‚Ü´')
call s:ConcealFn('arrow\.l\.not', '‚Üö')
call s:ConcealFn('arrow\.l\.quad', '‚≠Ö')
call s:ConcealFn('arrow\.l\.squiggly', '‚áú')
call s:ConcealFn('arrow\.l\.stop', '‚á§')
call s:ConcealFn('arrow\.l\.stroked', '‚á¶')
call s:ConcealFn('arrow\.l\.tail', '‚Ü¢')
call s:ConcealFn('arrow\.l\.triple', '‚áö')
call s:ConcealFn('arrow\.l\.twohead\.bar', '‚¨∂')
call s:ConcealFn('arrow\.l\.twohead', '‚Üû')
call s:ConcealFn('arrow\.l\.wave', '‚Üú')
call s:ConcealFn('arrow\.t', '‚Üë')
call s:ConcealFn('arrow\.t\.bar', '‚Ü•')
call s:ConcealFn('arrow\.t\.curve', '‚§¥')
call s:ConcealFn('arrow\.t\.dashed', '‚á°')
call s:ConcealFn('arrow\.t\.double', '‚áë')
call s:ConcealFn('arrow\.t\.filled', '‚¨Ü')
call s:ConcealFn('arrow\.t\.quad', '‚ü∞')
call s:ConcealFn('arrow\.t\.stop', '‚§í')
call s:ConcealFn('arrow\.t\.stroked', '‚áß')
call s:ConcealFn('arrow\.t\.triple', '‚§ä')
call s:ConcealFn('arrow\.t\.twohead', '‚Üü')
call s:ConcealFn('arrow\.b', '‚Üì')
call s:ConcealFn('arrow\.b\.bar', '‚Üß')
call s:ConcealFn('arrow\.b\.curve', '‚§µ')
call s:ConcealFn('arrow\.b\.dashed', '‚á£')
call s:ConcealFn('arrow\.b\.double', '‚áì')
call s:ConcealFn('arrow\.b\.filled', '‚¨á')
call s:ConcealFn('arrow\.b\.quad', '‚ü±')
call s:ConcealFn('arrow\.b\.stop', '‚§ì')
call s:ConcealFn('arrow\.b\.stroked', '‚á©')
call s:ConcealFn('arrow\.b\.triple', '‚§ã')
call s:ConcealFn('arrow\.b\.twohead', '‚Ü°')
call s:ConcealFn('arrow\.l\.r', '‚Üî')
call s:ConcealFn('arrow\.l\.r\.double', '‚áî')
call s:ConcealFn('arrow\.l\.r\.double\.long', '‚ü∫')
call s:ConcealFn('arrow\.l\.r\.double\.not', '‚áé')
call s:ConcealFn('arrow\.l\.r\.filled', '‚¨å')
call s:ConcealFn('arrow\.l\.r\.long', '‚ü∑')
call s:ConcealFn('arrow\.l\.r\.not', '‚ÜÆ')
call s:ConcealFn('arrow\.l\.r\.stroked', '‚¨Ñ')
call s:ConcealFn('arrow\.l\.r\.wave', '‚Ü≠')
call s:ConcealFn('arrow\.t\.b', '‚Üï')
call s:ConcealFn('arrow\.t\.b\.double', '‚áï')
call s:ConcealFn('arrow\.t\.b\.filled', '‚¨ç')
call s:ConcealFn('arrow\.t\.b\.stroked', '‚á≥')
call s:ConcealFn('arrow\.tr', '‚Üó')
call s:ConcealFn('arrow\.tr\.double', '‚áó')
call s:ConcealFn('arrow\.tr\.filled', '‚¨à')
call s:ConcealFn('arrow\.tr\.hook', '‚§§')
call s:ConcealFn('arrow\.tr\.stroked', '‚¨Ä')
call s:ConcealFn('arrow\.br', '‚Üò')
call s:ConcealFn('arrow\.br\.double', '‚áò')
call s:ConcealFn('arrow\.br\.filled', '‚¨ä')
call s:ConcealFn('arrow\.br\.hook', '‚§•')
call s:ConcealFn('arrow\.br\.stroked', '‚¨Ç')
call s:ConcealFn('arrow\.tl', '‚Üñ')
call s:ConcealFn('arrow\.tl\.double', '‚áñ')
call s:ConcealFn('arrow\.tl\.filled', '‚¨â')
call s:ConcealFn('arrow\.tl\.hook', '‚§£')
call s:ConcealFn('arrow\.tl\.stroked', '‚¨Å')
call s:ConcealFn('arrow\.bl', '‚Üô')
call s:ConcealFn('arrow\.bl\.double', '‚áô')
call s:ConcealFn('arrow\.bl\.filled', '‚¨ã')
call s:ConcealFn('arrow\.bl\.hook', '‚§¶')
call s:ConcealFn('arrow\.bl\.stroked', '‚¨É')
call s:ConcealFn('arrow\.tl\.br', '‚§°')
call s:ConcealFn('arrow\.tr\.bl', '‚§¢')
call s:ConcealFn('arrow\.ccw', '‚Ü∫')
call s:ConcealFn('arrow\.ccw\.half', '‚Ü∂')
call s:ConcealFn('arrow\.cw', '‚Üª')
call s:ConcealFn('arrow\.cw\.half', '‚Ü∑')
call s:ConcealFn('arrow\.zigzag', '‚ÜØ')
call s:ConcealFn('arrows\.rr', '‚áâ')
call s:ConcealFn('arrows\.ll', '‚áá')
call s:ConcealFn('arrows\.tt', '‚áà')
call s:ConcealFn('arrows\.bb', '‚áä')
call s:ConcealFn('arrows\.lr', '‚áÜ')
call s:ConcealFn('arrows\.lr\.stop', '‚Üπ')
call s:ConcealFn('arrows\.rl', '‚áÑ')
call s:ConcealFn('arrows\.tb', '‚áÖ')
call s:ConcealFn('arrows\.bt', '‚áµ')
call s:ConcealFn('arrows\.rrr', '‚á∂')
call s:ConcealFn('arrows\.lll', '‚¨±')
call s:ConcealFn('arrowhead\.t', '‚åÉ')
call s:ConcealFn('arrowhead\.b', '‚åÑ')
call s:ConcealFn('harpoon\.rt', '‚áÄ')
call s:ConcealFn('harpoon\.rt\.bar', '‚•õ')
call s:ConcealFn('harpoon\.rt\.stop', '‚•ì')
call s:ConcealFn('harpoon\.rb', '‚áÅ')
call s:ConcealFn('harpoon\.rb\.bar', '‚•ü')
call s:ConcealFn('harpoon\.rb\.stop', '‚•ó')
call s:ConcealFn('harpoon\.lt', '‚Üº')
call s:ConcealFn('harpoon\.lt\.bar', '‚•ö')
call s:ConcealFn('harpoon\.lt\.stop', '‚•í')
call s:ConcealFn('harpoon\.lb', '‚ÜΩ')
call s:ConcealFn('harpoon\.lb\.bar', '‚•û')
call s:ConcealFn('harpoon\.lb\.stop', '‚•ñ')
call s:ConcealFn('harpoon\.tl', '‚Üø')
call s:ConcealFn('harpoon\.tl\.bar', '‚•†')
call s:ConcealFn('harpoon\.tl\.stop', '‚•ò')
call s:ConcealFn('harpoon\.tr', '‚Üæ')
call s:ConcealFn('harpoon\.tr\.bar', '‚•ú')
call s:ConcealFn('harpoon\.tr\.stop', '‚•î')
call s:ConcealFn('harpoon\.bl', '‚áÉ')
call s:ConcealFn('harpoon\.bl\.bar', '‚•°')
call s:ConcealFn('harpoon\.bl\.stop', '‚•ô')
call s:ConcealFn('harpoon\.br', '‚áÇ')
call s:ConcealFn('harpoon\.br\.bar', '‚•ù')
call s:ConcealFn('harpoon\.br\.stop', '‚•ï')
call s:ConcealFn('harpoon\.lt\.rt', '‚•é')
call s:ConcealFn('harpoon\.lb\.rb', '‚•ê')
call s:ConcealFn('harpoon\.lb\.rt', '‚•ã')
call s:ConcealFn('harpoon\.lt\.rb', '‚•ä')
call s:ConcealFn('harpoon\.tl\.bl', '‚•ë')
call s:ConcealFn('harpoon\.tr\.br', '‚•è')
call s:ConcealFn('harpoon\.tl\.br', '‚•ç')
call s:ConcealFn('harpoon\.tr\.bl', '‚•å')
call s:ConcealFn('harpoons\.rtrb', '‚•§')
call s:ConcealFn('harpoons\.blbr', '‚••')
call s:ConcealFn('harpoons\.bltr', '‚•Ø')
call s:ConcealFn('harpoons\.lbrb', '‚•ß')
call s:ConcealFn('harpoons\.ltlb', '‚•¢')
call s:ConcealFn('harpoons\.ltrb', '‚áã')
call s:ConcealFn('harpoons\.ltrt', '‚•¶')
call s:ConcealFn('harpoons\.rblb', '‚•©')
call s:ConcealFn('harpoons\.rtlb', '‚áå')
call s:ConcealFn('harpoons\.rtlt', '‚•®')
call s:ConcealFn('harpoons\.tlbr', '‚•Æ')
call s:ConcealFn('harpoons\.tltr', '‚•£')
call s:ConcealFn('tack\.r', '‚ä¢')
call s:ConcealFn('tack\.r\.not', '‚ä¨')
call s:ConcealFn('tack\.r\.long', '‚üù')
call s:ConcealFn('tack\.r\.short', '‚ä¶')
call s:ConcealFn('tack\.r\.double', '‚ä®')
call s:ConcealFn('tack\.r\.double\.not', '‚ä≠')
call s:ConcealFn('tack\.l', '‚ä£')
call s:ConcealFn('tack\.l\.long', '‚üû')
call s:ConcealFn('tack\.l\.short', '‚´û')
call s:ConcealFn('tack\.l\.double', '‚´§')
call s:ConcealFn('tack\.t', '‚ä•')
call s:ConcealFn('tack\.t\.big', '‚üò')
call s:ConcealFn('tack\.t\.double', '‚´´')
call s:ConcealFn('tack\.t\.short', '‚´†')
call s:ConcealFn('tack\.b', '‚ä§')
call s:ConcealFn('tack\.b\.big', '‚üô')
call s:ConcealFn('tack\.b\.double', '‚´™')
call s:ConcealFn('tack\.b\.short', '‚´ü')
call s:ConcealFn('tack\.l\.r', '‚üõ')
call s:ConcealFn('alpha', 'Œ±')
call s:ConcealFn('beta', 'Œ≤')
call s:ConcealFn('beta\.alt', 'œê')
call s:ConcealFn('chi', 'œá')
call s:ConcealFn('delta', 'Œ¥')
call s:ConcealFn('epsilon', 'Œµ')
call s:ConcealFn('epsilon\.alt', 'œµ')
call s:ConcealFn('eta', 'Œ∑')
call s:ConcealFn('gamma', 'Œ≥')
call s:ConcealFn('iota', 'Œπ')
call s:ConcealFn('kai', 'œó')
call s:ConcealFn('kappa', 'Œ∫')
call s:ConcealFn('kappa\.alt', 'œ∞')
call s:ConcealFn('lambda', 'Œª')
call s:ConcealFn('mu', 'Œº')
call s:ConcealFn('nu', 'ŒΩ')
call s:ConcealFn('ohm', '‚Ñ¶')
call s:ConcealFn('ohm\.inv', '‚Ñß')
call s:ConcealFn('omega', 'œâ')
call s:ConcealFn('omicron', 'Œø')
call s:ConcealFn('phi', 'œÜ')
call s:ConcealFn('phi\.alt', 'œï')
call s:ConcealFn('pi', 'œÄ')
call s:ConcealFn('pi\.alt', 'œñ')
call s:ConcealFn('psi', 'œà')
call s:ConcealFn('rho', 'œÅ')
call s:ConcealFn('rho\.alt', 'œ±')
call s:ConcealFn('sigma', 'œÉ')
call s:ConcealFn('sigma\.alt', 'œÇ')
call s:ConcealFn('tau', 'œÑ')
call s:ConcealFn('theta', 'Œ∏')
call s:ConcealFn('theta\.alt', 'œë')
call s:ConcealFn('upsilon', 'œÖ')
call s:ConcealFn('xi', 'Œæ')
call s:ConcealFn('zeta', 'Œ∂')
call s:ConcealFn('Alpha', 'Œë')
call s:ConcealFn('Beta', 'Œí')
call s:ConcealFn('Chi', 'Œß')
call s:ConcealFn('Delta', 'Œî')
call s:ConcealFn('Epsilon', 'Œï')
call s:ConcealFn('Eta', 'Œó')
call s:ConcealFn('Gamma', 'Œì')
call s:ConcealFn('Iota', 'Œô')
call s:ConcealFn('Kai', 'œè')
call s:ConcealFn('Kappa', 'Œö')
call s:ConcealFn('Lambda', 'Œõ')
call s:ConcealFn('Mu', 'Œú')
call s:ConcealFn('Nu', 'Œù')
call s:ConcealFn('Omega', 'Œ©')
call s:ConcealFn('Omicron', 'Œü')
call s:ConcealFn('Phi', 'Œ¶')
call s:ConcealFn('Pi', 'Œ†')
call s:ConcealFn('Psi', 'Œ®')
call s:ConcealFn('Rho', 'Œ°')
call s:ConcealFn('Sigma', 'Œ£')
call s:ConcealFn('Tau', 'Œ§')
call s:ConcealFn('Theta', 'Œò')
call s:ConcealFn('Upsilon', 'Œ•')
call s:ConcealFn('Xi', 'Œû')
call s:ConcealFn('Zeta', 'Œñ')
call s:ConcealFn('aleph', '◊ê')
call s:ConcealFn('alef', '◊ê')
call s:ConcealFn('beth', '◊ë')
call s:ConcealFn('bet', '◊ë')
call s:ConcealFn('gimmel', '◊í')
call s:ConcealFn('gimel', '◊í')
call s:ConcealFn('shin', '◊©')
call s:ConcealFn('AA', 'ùî∏')
call s:ConcealFn('BB', 'ùîπ')
call s:ConcealFn('CC', '‚ÑÇ')
call s:ConcealFn('DD', 'ùîª')
call s:ConcealFn('EE', 'ùîº')
call s:ConcealFn('FF', 'ùîΩ')
call s:ConcealFn('GG', 'ùîæ')
call s:ConcealFn('HH', '‚Ñç')
call s:ConcealFn('II', 'ùïÄ')
call s:ConcealFn('JJ', 'ùïÅ')
call s:ConcealFn('KK', 'ùïÇ')
call s:ConcealFn('LL', 'ùïÉ')
call s:ConcealFn('MM', 'ùïÑ')
call s:ConcealFn('NN', '‚Ñï')
call s:ConcealFn('OO', 'ùïÜ')
call s:ConcealFn('PP', '‚Ñô')
call s:ConcealFn('QQ', '‚Ñö')
call s:ConcealFn('RR', '‚Ñù')
call s:ConcealFn('SS', 'ùïä')
call s:ConcealFn('TT', 'ùïã')
call s:ConcealFn('UU', 'ùïå')
call s:ConcealFn('VV', 'ùïç')
call s:ConcealFn('WW', 'ùïé')
call s:ConcealFn('XX', 'ùïè')
call s:ConcealFn('YY', 'ùïê')
call s:ConcealFn('ZZ', '‚Ñ§')
call s:ConcealFn('ell', '‚Ñì')
call s:ConcealFn('planck', '‚Ñé')
call s:ConcealFn('planck\.reduce', '‚Ñè')
call s:ConcealFn('angstrom', '‚Ñ´')
call s:ConcealFn('kelvin', '‚Ñ™')
call s:ConcealFn('Re', '‚Ñú')
call s:ConcealFn('Im', '‚Ñë')
call s:ConcealFn('dotless\.i', 'ùö§')
call s:ConcealFn('dotless\.j', 'ùö•')
